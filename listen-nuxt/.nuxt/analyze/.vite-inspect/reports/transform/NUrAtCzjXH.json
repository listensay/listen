{
  "resolvedId": "/Users/mmk/listen/listen-nuxt/node_modules/devalue/src/parse.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {\n\tHOLE,\n\tNAN,\n\tNEGATIVE_INFINITY,\n\tNEGATIVE_ZERO,\n\tPOSITIVE_INFINITY,\n\tUNDEFINED\n} from './constants.js';\n\n/**\n * Revive a value serialized with `devalue.stringify`\n * @param {string} serialized\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function parse(serialized, revivers) {\n\treturn unflatten(JSON.parse(serialized), revivers);\n}\n\n/**\n * Revive a value flattened with `devalue.stringify`\n * @param {number | any[]} parsed\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function unflatten(parsed, revivers) {\n\tif (typeof parsed === 'number') return hydrate(parsed, true);\n\n\tif (!Array.isArray(parsed) || parsed.length === 0) {\n\t\tthrow new Error('Invalid input');\n\t}\n\n\tconst values = /** @type {any[]} */ (parsed);\n\n\tconst hydrated = Array(values.length);\n\n\t/**\n\t * @param {number} index\n\t * @returns {any}\n\t */\n\tfunction hydrate(index, standalone = false) {\n\t\tif (index === UNDEFINED) return undefined;\n\t\tif (index === NAN) return NaN;\n\t\tif (index === POSITIVE_INFINITY) return Infinity;\n\t\tif (index === NEGATIVE_INFINITY) return -Infinity;\n\t\tif (index === NEGATIVE_ZERO) return -0;\n\n\t\tif (standalone) throw new Error(`Invalid input`);\n\n\t\tif (index in hydrated) return hydrated[index];\n\n\t\tconst value = values[index];\n\n\t\tif (!value || typeof value !== 'object') {\n\t\t\thydrated[index] = value;\n\t\t} else if (Array.isArray(value)) {\n\t\t\tif (typeof value[0] === 'string') {\n\t\t\t\tconst type = value[0];\n\n\t\t\t\tconst reviver = revivers?.[type];\n\t\t\t\tif (reviver) {\n\t\t\t\t\treturn (hydrated[index] = reviver(hydrate(value[1])));\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Date':\n\t\t\t\t\t\thydrated[index] = new Date(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Set':\n\t\t\t\t\t\tconst set = new Set();\n\t\t\t\t\t\thydrated[index] = set;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 1) {\n\t\t\t\t\t\t\tset.add(hydrate(value[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Map':\n\t\t\t\t\t\tconst map = new Map();\n\t\t\t\t\t\thydrated[index] = map;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tmap.set(hydrate(value[i]), hydrate(value[i + 1]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RegExp':\n\t\t\t\t\t\thydrated[index] = new RegExp(value[1], value[2]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\thydrated[index] = Object(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BigInt':\n\t\t\t\t\t\thydrated[index] = BigInt(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'null':\n\t\t\t\t\t\tconst obj = Object.create(null);\n\t\t\t\t\t\thydrated[index] = obj;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tobj[value[i]] = hydrate(value[i + 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unknown type ${type}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = new Array(value.length);\n\t\t\t\thydrated[index] = array;\n\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\tconst n = value[i];\n\t\t\t\t\tif (n === HOLE) continue;\n\n\t\t\t\t\tarray[i] = hydrate(n);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t/** @type {Record<string, any>} */\n\t\t\tconst object = {};\n\t\t\thydrated[index] = object;\n\n\t\t\tfor (const key in value) {\n\t\t\t\tconst n = value[key];\n\t\t\t\tobject[key] = hydrate(n);\n\t\t\t}\n\t\t}\n\n\t\treturn hydrated[index];\n\t}\n\n\treturn hydrate(0);\n}\n",
      "start": 1712416379478,
      "end": 1712416379504,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712416379504,
      "end": 1712416379504,
      "order": "normal"
    }
  ]
}
